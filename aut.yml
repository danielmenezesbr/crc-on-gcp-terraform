- hosts: localhost
  vars:
    password: password
    crc_enabled: ${crc_enabled}
    snc_enabled: ${snc_enabled}
    ddns_enabled: ${ddns_enabled}
  tasks:

    - name: Make sure we have a 'libvirt' group
      group:
        name: libvirt
        state: present
    - name: Allow 'libvirt' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%libvirt'
        line: '%libvirt ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    - name: Create a login user
      user:
        name: crcuser
        password: "{{ password | password_hash('sha512') }}"
        state: present
        append: yes
        groups: libvirt
    - name: pull-secret.txt
      copy:
        dest: "/home/crcuser/pull-secret.txt"
        content: |
          ${crc_pull_secret}
    - name: install ansible collections
      become: "true"
      become_user: "crcuser"
      shell: |
        ansible-galaxy collection install /etc/ansible-provision/redhat-openshift-2.0.1.tar.gz
        pip3 install --upgrade --user openshift

#CRC
    - name: Download and Extract CRC
      become: "true"
      become_user: "crcuser"
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/crc/1.22.0/crc-linux-amd64.tar.xz
        dest: /home/crcuser
        remote_src: yes
        group: crcuser
        owner: crcuser
        creates: /home/crcuser/crc/
      when: crc_enabled
    - name: Rename crc directory
      #CRC 1.22 uses OpenShift 4.6.15
      command: mv /home/crcuser/crc-linux-1.22.0-amd64/ /home/crcuser/crc/
      when: crc_enabled
    - name: crc consent-telemetry
      become_user: crcuser
      command: /home/crcuser/crc/crc config set consent-telemetry no
      retries: 20
      delay: 15
      when: crc_enabled
    - name: crc setup
      command: runuser -l crcuser -c '/home/crcuser/crc/crc setup'
      when: crc_enabled
    - name: crc config set memory
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set memory ${crc_snc_memory}'
      when: crc_enabled
    - name: crc config set cpus
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set cpus ${crc_snc_cpus}'
      when: crc_enabled
    - name: crc config set enable-cluster-monitoring
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set enable-cluster-monitoring ${crc_monitoring_enabled}'
      when: crc_enabled
    - name: crc config set pull-secret-file
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set pull-secret-file /home/crcuser/pull-secret.txt'
      when: crc_enabled
    - name: install crc systemd unit file
      template: src=crc.j2 dest=/etc/systemd/system/crc.service
      when: crc_enabled
    - name: start crc
      systemd: state=started name=crc daemon_reload=yes enabled=yes
      when: crc_enabled
    - name: Change PATH CRC
      shell: |
        echo "PATH=$PATH:/home/crcuser/crc:/home/crcuser/.crc/bin/oc" >> /etc/bashrc
        echo "KUBECONFIG=/home/crcuser/.crc/machines/crc/kubeconfig" >> /etc/bashrc
        echo "K8S_AUTH_KUBECONFIG=/home/crcuser/.crc/machines/crc/kubeconfig" >> /etc/bashrc
      become: true
      when: crc_enabled
#    - name: ssh config to enter inside CRC VM
#      shell: |
#        cat <<EOF > ~/.ssh/config
#        Host master
#            Hostname 192.168.130.11
#            User core
#            IdentityFile /home/crcuser/.crc/machines/crc/id_ecdsa
#            StrictHostKeyChecking no
#            UserKnownHostsFile /dev/null
#        EOF
#        chmod 600 ~/.ssh/config
#      become: yes
#      become_user: "crcuser"
#      when: crc_enabled
#SNC
    - name: Change PATH SNC
      shell: |
        echo "PATH=$PATH:/home/crcuser/snc/openshift-clients/linux" >> /etc/bashrc
        echo "KUBECONFIG=/home/crcuser/snc/crc-tmp-install-data/auth/kubeconfig" >> /etc/bashrc
        echo "K8S_AUTH_KUBECONFIG=/home/crcuser/snc/crc-tmp-install-data/auth/kubeconfig" >> /etc/bashrc
      when: snc_enabled
    - name: install virt-filesystems
      shell: yum -y install /usr/bin/virt-filesystems
      retries: 5
      delay: 30
    - name: restart libvirtd service
        shell: |
          sudo systemctl restart libvirtd
        when: snc_enabled
    - name: SNC pre-install
      shell: |
        mkdir /home/crcuser/snc
        git clone --branch 4.6 https://github.com/code-ready/snc /home/crcuser/snc
        #git clone --branch fix-hardcoded-api.crc.testing https://github.com/danielmenezesbr/snc /home/crcuser/snc
        cd /home/crcuser/snc
        #patch for work with *.nip.io
        sed -i '/if echo $${ping_status}/c\        if false; then' snc-library.sh
        #vm customizations
        sed -i 's/domainMemory = 14336/domainMemory = ${crc_snc_memory}/' snc.sh
        sed -i 's/domainVcpu = 6/domainVcpu = ${crc_snc_cpus}/' snc.sh
        sed -i 's/volumeSize = 33285996544/volumeSize = ${snc_disk_size}/' snc.sh
        cat <<EOF > install.sh
        export OPENSHIFT_VERSION="4.6.18"
        export MIRROR="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp"
        export OPENSHIFT_PULL_SECRET_PATH="/home/crcuser/pull-secret.txt"
        export CRC_BASE_DOMAIN="127.0.0.1.nip.io"
        nohup ./snc.sh 2>&1 &
        EOF
        chmod +x install.sh
      become: yes
      become_user: "crcuser"
      when: snc_enabled
    - name: SNC install
      ansible.builtin.shell: /home/crcuser/snc/install.sh &> install.out
      args:
        chdir: /home/crcuser/snc
      become: yes
      become_user: "crcuser"
      when: snc_enabled
#DDNS
#    - name: Add Docker repo
#      get_url:
#        url: https://download.docker.com/linux/centos/docker-ce.repo
#        dest: /etc/yum.repos.d/docker-ce.repo
#      become: yes
#    - name: setup docker-ce
#      yum: name=docker-ce state=present
#    - name: start docker
#      service: name=docker.service enabled=yes state=started
#    - name: deps
#      pip:
#        name: docker-py
#    - name: Log into DockerHub
#      community.docker.docker_login:
#        username: ${docker_login}
#        password: ${docker_password}
#      when: ddns_enabled
#    - name: pull image troglobit/inadyn:latest
#      docker_image:
#        name: troglobit/inadyn:latest
#      when: ddns_enabled
#    - name: install myservice systemd unit file
#      template: src=myservice.j2 dest=/etc/systemd/system/myservice.service
#      when: ddns_enabled
#    - name: start myservice
#      systemd: state=started name=myservice daemon_reload=yes enabled=yes
#      when: ddns_enabled