- hosts: localhost
  vars:
    password: password
    strategy: ${strategy}
    ddns_enabled: ${ddns_enabled}
  tasks:

#COMMON
    - name: Enabled container-tools (skopeo, podman and buildah)
      shell: yum module enable -y container-tools:rhel8
      register: result
      retries: 10
      until: result.rc == 0
      delay: 30
    - name: Install container-tools
      shell: yum module install -y container-tools:rhel8
      register: result
      retries: 10
      until: result.rc == 0
      delay: 30
    - name: Install yum git
      yum:
        name:
          - git
#DDNS
    - name: install ddns systemd unit file
      template: src=ddns.j2 dest=/etc/systemd/system/ddns.service
      when: ddns_enabled
    - name: start ddns service
      systemd: state=started name=ddns daemon_reload=yes enabled=yes
      when: ddns_enabled
#COMMON
    - name: Make sure we have a 'libvirt' group
      group:
        name: libvirt
        state: present
    - name: Allow 'libvirt' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%libvirt'
        line: '%libvirt ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    - name: Create a login user
      user:
        name: crcuser
        password: "{{ password | password_hash('sha512') }}"
        state: present
        append: yes
        groups: libvirt
    - name: pull-secret.txt
      copy:
        dest: "/home/crcuser/pull-secret.txt"
        content: |
          ${crc_pull_secret}
    - name: install ansible collections
      become: "true"
      become_user: "crcuser"
      shell: |
        ansible-galaxy collection install /etc/ansible-provision/redhat-openshift-2.0.1.tar.gz
        pip3 install --upgrade --user openshift
#CRC
    - name: Download and Extract CRC
      become: "true"
      become_user: "crcuser"
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/crc/1.22.0/crc-linux-amd64.tar.xz
        dest: /home/crcuser
        remote_src: yes
        group: crcuser
        owner: crcuser
        creates: /home/crcuser/crc/
      when:  strategy == "crc"
    - name: Rename crc directory
      #CRC 1.22 uses OpenShift 4.6.15
      command: mv /home/crcuser/crc-linux-1.22.0-amd64/ /home/crcuser/crc/
      when: strategy == "crc"
    - name: crc consent-telemetry
      become_user: crcuser
      command: /home/crcuser/crc/crc config set consent-telemetry no
      retries: 20
      delay: 15
      when: strategy == "crc"
    - name: crc setup
      command: runuser -l crcuser -c '/home/crcuser/crc/crc setup'
      when: strategy == "crc"
    - name: crc config set memory
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set memory ${crc_snc_memory}'
      when: strategy == "crc"
    - name: crc config set cpus
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set cpus ${crc_snc_cpus}'
      when: strategy == "crc"
    - name: crc config set enable-cluster-monitoring
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set enable-cluster-monitoring ${crc_monitoring_enabled}'
      when: strategy == "crc"
    - name: crc config set pull-secret-file
      command: runuser -l crcuser -c '/home/crcuser/crc/crc config set pull-secret-file /home/crcuser/pull-secret.txt'
      when: strategy == "crc"
    - name: install crc systemd unit file
      template: src=crc.j2 dest=/etc/systemd/system/crc.service
      when: strategy == "crc"
    - name: start crc
      systemd: state=started name=crc daemon_reload=yes enabled=yes
      when: strategy == "crc"
    - name: Change PATH CRC
      shell: |
        echo 'export PATH="$PATH:/home/crcuser/crc:/home/crcuser/.crc/bin/oc"' >> /etc/bashrc
        echo 'export KUBECONFIG="/home/crcuser/.crc/machines/crc/kubeconfig"' >> /etc/bashrc
        echo 'export K8S_AUTH_KUBECONFIG="/home/crcuser/.crc/machines/crc/kubeconfig"' >> /etc/bashrc
      become: true
      when: strategy == "crc"
    - name: ssh config to enter inside CRC VM
      shell: |
        cat <<EOF > ~/.ssh/config
        Host master
            Hostname 192.168.130.11
            User core
            IdentityFile /home/crcuser/.crc/machines/crc/id_ecdsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
        EOF
        chmod 600 ~/.ssh/config
      become: yes
      become_user: "crcuser"
      when: strategy == "crc"
#SNC
    - name: Change PATH SNC
      shell: |
        echo 'export PATH="$PATH:/home/crcuser/snc/openshift-clients/linux"' >> /etc/bashrc
        echo 'export KUBECONFIG="/home/crcuser/snc/crc-tmp-install-data/auth/kubeconfig"' >> /etc/bashrc
        echo 'export K8S_AUTH_KUBECONFIG="/home/crcuser/snc/crc-tmp-install-data/auth/kubeconfig"' >> /etc/bashrc
      when: strategy == "snc"
    - name: ssh config to enter inside SNC VMs (master and bootstrap)
      shell: |
        cat <<EOF > ~/.ssh/config
        Host master
            Hostname 192.168.126.11
            User core
            IdentityFile /home/crcuser/snc/id_ecdsa_crc
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null

        Host bootstrap
            Hostname 192.168.126.10
            User core
            IdentityFile /home/crcuser/snc/id_ecdsa_crc
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
        EOF
        chmod 600 ~/.ssh/config
      become: yes
      become_user: "crcuser"
      when: strategy == "snc"
    - name: dnf update
      shell: dnf update -y
      register: result
      retries: 6
      until: result.rc == 0
      delay: 30
      when: strategy == "snc"
    - name: install virt-filesystems
      shell: yum -y install /usr/bin/virt-filesystems
      register: result
      retries: 6
      until: result.rc == 0
      delay: 30
      when: strategy == "snc"
    - name: SNC deps pre-install
      shell: |
        dnf -y module install virt
        dnf -y install virt-install virt-viewer
        echo -e 'listen_tls = 0\nlisten_tcp = 1\ntcp_port = "16509"\nauth_tcp = "none"' | tee -a /etc/libvirt/libvirtd.conf
        sed -i 's/LIBVIRTD_ARGS="--timeout 120"/#LIBVIRTD_ARGS="--timeout 120"/' /etc/sysconfig/libvirtd
        sed -i 's/#LIBVIRTD_ARGS="--listen"/LIBVIRTD_ARGS="--listen"/' /etc/sysconfig/libvirtd
        systemctl mask libvirtd.socket libvirtd-ro.socket libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket
        echo "net.ipv4.ip_forward = 1" | tee /etc/sysctl.d/99-ipforward.conf
        sysctl -p /etc/sysctl.d/99-ipforward.conf
      when: strategy == "snc"
    - name: restart libvirtd service
      shell: |
        sudo systemctl restart libvirtd
      when: strategy == "snc"
    - name: SNC pre-install
      shell: |
        set -exuo pipefail
        mkdir /home/crcuser/snc
        git clone --branch 4.6 https://github.com/code-ready/snc /home/crcuser/snc
        #git clone --branch fix-hardcoded-api.crc.testing https://github.com/danielmenezesbr/snc /home/crcuser/snc
        cd /home/crcuser/snc
        #patch for work with *.nip.io
        sed -i '/if echo $${ping_status}/c\        if false; then' snc-library.sh
        #vm customizations
        sed -i 's/domainMemory = 14336/domainMemory = ${crc_snc_memory}/' snc.sh
        sed -i 's/domainVcpu = 6/domainVcpu = ${crc_snc_cpus}/' snc.sh
        sed -i 's/volumeSize = 33285996544/volumeSize = ${snc_disk_size}/' snc.sh
        cat <<'EOF' > install.sh
        set -exuo pipefail
        export OPENSHIFT_VERSION="4.6.18"
        export MIRROR="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp"
        export OPENSHIFT_PULL_SECRET_PATH="/home/crcuser/pull-secret.txt"
        export CRC_BASE_DOMAIN="127.0.0.1.nip.io"
        ./snc.sh 2>&1
        sudo virsh autostart $(sudo virsh list --all --name | head -n 1)
        EOF
        chmod +x install.sh
        # nip.io requires stop firewalld
        sudo systemctl stop firewalld
        sudo systemctl disable firewalld
      become: yes
      become_user: "crcuser"
      when: strategy == "snc"
    - name: SNC install
      ansible.builtin.shell: /home/crcuser/snc/install.sh &> install.out &
      args:
        chdir: /home/crcuser/snc
      become: yes
      become_user: "crcuser"
      when: strategy == "snc"
#Multi-Node
    - name: Change env
      shell: |
        echo 'export KUBECONFIG="/home/crcuser/clusters/mycluster/auth/kubeconfig"' >> /etc/bashrc
        echo 'export K8S_AUTH_KUBECONFIG="/home/crcuser/clusters/mycluster/auth/kubeconfig"' >> /etc/bashrc
      when: strategy == "mnc"
    - name: dnf update
      shell: dnf update -y
      register: result
      retries: 6
      until: result.rc == 0
      delay: 30
      when: strategy == "mnc"
    - name: install virt-filesystems
      shell: yum -y install /usr/bin/virt-filesystems
      register: result
      retries: 6
      until: result.rc == 0
      delay: 30
      when: strategy == "mnc"
    - name: install wget
      shell: yum -y install wget
      register: result
      retries: 6
      until: result.rc == 0
      delay: 30
      when: strategy == "mnc"
    - name: deps pre-install
      shell: |
        #dnf -y module install virt
        #dnf -y install virt-install virt-viewer
        #echo -e 'listen_tls = 0\nlisten_tcp = 1\ntcp_port = "16509"\nauth_tcp = "none"' | tee -a /etc/libvirt/libvirtd.conf
        #sed -i 's/LIBVIRTD_ARGS="--timeout 120"/#LIBVIRTD_ARGS="--timeout 120"/' /etc/sysconfig/libvirtd
        #sed -i 's/#LIBVIRTD_ARGS="--listen"/LIBVIRTD_ARGS="--listen"/' /etc/sysconfig/libvirtd
        #systemctl mask libvirtd.socket libvirtd-ro.socket libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket
        #echo "net.ipv4.ip_forward = 1" | tee /etc/sysctl.d/99-ipforward.conf
        #sysctl -p /etc/sysctl.d/99-ipforward.conf
      when: strategy == "mnc"
    - name: restart libvirtd service
      shell: |
        sudo systemctl restart libvirtd
      when: strategy == "mnc"
    - name: install yq
      shell: |
        wget https://github.com/mikefarah/yq/releases/download/1.15.0/yq_linux_amd64
        mv yq_linux_amd64 yq
        chmod +x yq
        mv yq /usr/bin/
        yq -V
      when: strategy == "mnc"
    - name: OpenShift install
      shell: |
        set -exuo pipefail
        NAME="mycluster"
        CLUSTER_DIR="$${HOME}/clusters/$${NAME}"
        INSTALL_DIR=$${CLUSTER_DIR}
        export BASE_DOMAIN="127.0.0.1.nip.io"
        #export BASE_DOMAIN="openshift.testing"
        export CLUSTER_NAME="$${NAME}"
        CERT_ROTATION=$${SNC_DISABLE_CERT_ROTATION:-enabled}
        CRC_VM_NAME="$${NAME}"
        OPENSHIFT_INSTALL="openshift-install"
        sudo bash -c 'cat >> /etc/modprobe.d/kvm.conf' << EOF
        options kvm_intel nested=1
        EOF
        # Ensure nesting is enabled in the kernel
        # TODO: verify this is still necessary
        sudo modprobe -r kvm_intel
        sudo modprobe kvm_intel nested=1
        sudo systemctl restart libvirtd
        # Ensure nesting is enabled in the kernel
        # TODO: verify this is still necessary
        #sudo modprobe -r kvm_intel
        #sudo modprobe kvm_intel nested=1
        #sudo systemctl restart libvirtd
        # Set up iptables and firewalld
        # TODO: discover the ports
        #sudo firewall-cmd --permanent --add-rich-rule "rule service name="libvirt" reject"
        #sudo firewall-cmd --permanent --zone=libvirt --add-service=libvirt
        #sudo firewall-cmd --zone=libvirt --add-service=libvirt --permanent
        #sudo systemctl stop firewalld
        #sudo systemctl disable firewalld
        sudo iptables -F
        sudo iptables -X
        sudo iptables -t nat -F
        sudo iptables -t nat -X
        sudo iptables -t mangle -F
        sudo iptables -t mangle -X
        sudo iptables -P INPUT ACCEPT
        sudo iptables -P FORWARD ACCEPT
        sudo iptables -P OUTPUT ACCEPT
        echo -e "[main]\ndns=dnsmasq" | sudo tee /etc/NetworkManager/conf.d/openshift.conf
        echo server=/openshift.testing/192.168.126.1 | sudo tee /etc/NetworkManager/dnsmasq.d/openshift.conf
        # Create new domain for ingress to make sure it able to resolve auth route URL
        echo address=/.apps.openshift.testing/192.168.126.51 | sudo tee -a /etc/NetworkManager/dnsmasq.d/openshift.conf
        sudo systemctl restart NetworkManager

        #if [[ $${CERT_ROTATION} == "enabled" ]]
        #then
        #    # Disable the network time sync and set the clock to past (for a day) on host
        #    sudo timedatectl set-ntp off
        #    sudo date -s '-1 day'
        #fi

        cd ~
        export OPENSHIFT_VERSION="4.6.18"
        curl -L -o openshift-client-linux.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$${OPENSHIFT_VERSION}/openshift-client-linux.tar.gz
        tar -zxf openshift-client-linux.tar.gz
        sudo mv $HOME/oc /usr/bin
        sudo ln -s /usr/bin/oc /usr/bin/kubectl

        #sudo systemctl stop firewalld # nip.io requires stop firewalld
        #sudo systemctl disable firewalld
        if [ -d "$${CLUSTER_DIR}" ]; then
          echo "WARNING: cluster $${NAME} already exists at $${CLUSTER_DIR}"
        else
          mkdir -p $${CLUSTER_DIR}
        fi
        cd $CLUSTER_DIR
        RELEASE_IMAGE="quay.io/openshift-release-dev/ocp-release:$${OPENSHIFT_VERSION}-x86_64"
        oc adm release extract -a /home/crcuser/pull-secret.txt --command openshift-baremetal-install "$${RELEASE_IMAGE}"
        sudo mv openshift-baremetal-install /usr/bin/openshift-install
        #$${OPENSHIFT_INSTALL} --dir $${INSTALL_DIR} destroy cluster || echo "failed to destroy previous cluster.  Continuing anyway"
        SSH_KEY="$${HOME}/.ssh/id_rsa"
        if [ ! -f $SSH_KEY ]; then
          ssh-keygen -t rsa -N "" -f $SSH_KEY
        fi
        export PUB_SSH_KEY="$${SSH_KEY}.pub"
        PULL_SECRET=$(cat "$${HOME}/pull-secret.txt")
        cat > "$${CLUSTER_DIR}/install-config.yaml" << EOF
        apiVersion: v1
        baseDomain: "$${BASE_DOMAIN}"
        compute:
        - hyperthreading: Enabled
          architecture: amd64
          name: worker
          platform: {}
          replicas: 2
        controlPlane:
          hyperthreading: Enabled
          architecture: amd64
          name: master
          platform: {}
          replicas: 3
        metadata:
          creationTimestamp: null
          name: "$${CLUSTER_NAME}"
        networking:
          clusterNetwork:
          - cidr: 10.128.0.0/14
            hostPrefix: 23
          machineNetwork:
          - cidr: 192.168.126.0/24
          networkType: OpenShiftSDN
          serviceNetwork:
          - 172.30.0.0/16
        platform:
          libvirt:
            network:
              if: tt0
        publish: External
        pullSecret: $(echo \'"$${PULL_SECRET}"\')
        sshKey: |
          $(cat "$${PUB_SSH_KEY}")
        EOF
        # Create manifests and modify route domain
        openshift-install --dir="$CLUSTER_DIR" create manifests
        #sed -i 's/mastersSchedulable: false/mastersSchedulable: true/' $CLUSTER_DIR/manifests/cluster-scheduler-02-config.yml
        # Workaround for https://github.com/openshift/installer/issues/1007
        # Add custom domain to cluster-ingress
        yq write --inplace $CLUSTER_DIR/manifests/cluster-ingress-02-config.yml spec[domain] apps.$BASE_DOMAIN

        # Add master memory to 12 GB
        # This is only valid for openshift 4.3 onwards
        yq write --inplace $${CLUSTER_DIR}/openshift/99_openshift-cluster-api_master-machines-0.yaml spec.providerSpec.value[domainMemory] 14336
        cat <<EOF > install.sh
        set -exuo pipefail
        openshift-install create cluster --dir="$CLUSTER_DIR" || true
        source /tmp/tools.sh
        #export SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /home/crcuser/.ssh/id_rsa"
        #export CLUSTER_NAME=$CLUSTER_NAME
        #export BASE_DOMAIN=$BASE_DOMAIN
        #if [[ $${CERT_ROTATION} == "enabled" ]]
        #then
        #    renew_certificates
        #fi
        openshift-install wait-for install-complete --dir="$CLUSTER_DIR"
        sudo virsh list --all --name | xargs -L1 sudo virsh autostart
        EOF
        chmod +x install.sh
      become: yes
      become_user: "crcuser"
      when: strategy == "mnc"
    - name: OpenShift install
      ansible.builtin.shell: /home/crcuser/clusters/mycluster/install.sh &> install.out &
      args:
        chdir: /home/crcuser/clusters/mycluster
      become: yes
      become_user: "crcuser"
      when: strategy == "mnc"
